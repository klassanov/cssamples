// <copyright file="ProgramTest.ParallelSearch.g.cs" company="Microsoft">Copyright © Microsoft 2012</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.Pex.Framework;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.ExtendedReflection.DataAccess;

namespace ParallelSearch
{
  public partial class ProgramTest
  {
[TestMethod]
[PexGeneratedBy(typeof(ProgramTest))]
[PexRaisedException(typeof(TermDestructionException))]
public void ParallelSearchThrowsTermDestructionException115()
{
    List<object> list;
    List<object> list1;
    object[] os = new object[79];
    list = new List<object>((IEnumerable<object>)os);
    Program s0 = new Program();
    list1 = this.ParallelSearch<object>
                (s0, list, PexChoose.CreateDelegate<Func<object, bool>>());
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(0, list1.Capacity);
    Assert.AreEqual<int>(0, list1.Count);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(ProgramTest))]
public void ParallelSearch772()
{
    List<object> list;
    List<object> list1;
    object[] os = new object[5];
    list = new List<object>((IEnumerable<object>)os);
    Program s0 = new Program();
    list1 = this.ParallelSearch<object>
                (s0, list, PexChoose.CreateDelegate<Func<object, bool>>());
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(0, list1.Capacity);
    Assert.AreEqual<int>(0, list1.Count);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(ProgramTest))]
public void ParallelSearch188()
{
    List<object> list;
    List<object> list1;
    object[] os = new object[1];
    list = new List<object>((IEnumerable<object>)os);
    Program s0 = new Program();
    list1 = this.ParallelSearch<object>
                (s0, list, PexChoose.CreateDelegate<Func<object, bool>>());
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(0, list1.Capacity);
    Assert.AreEqual<int>(0, list1.Count);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(ProgramTest))]
public void ParallelSearch569()
{
    List<object> list;
    List<object> list1;
    object[] os = new object[0];
    list = new List<object>((IEnumerable<object>)os);
    Program s0 = new Program();
    list1 = this.ParallelSearch<object>
                (s0, list, PexChoose.CreateDelegate<Func<object, bool>>());
    Assert.IsNotNull((object)list1);
    Assert.AreEqual<int>(0, list1.Capacity);
    Assert.AreEqual<int>(0, list1.Count);
    Assert.IsNotNull((object)s0);
}
[TestMethod]
[PexGeneratedBy(typeof(ProgramTest))]
[ExpectedException(typeof(ArgumentException))]
public void ParallelSearchThrowsArgumentException221()
{
    List<object> list;
    List<object> list1;
    object[] os = new object[0];
    list = new List<object>((IEnumerable<object>)os);
    Program s0 = new Program();
    list1 = this.ParallelSearch<object>(s0, list, (Func<object, bool>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(ProgramTest))]
[ExpectedException(typeof(ArgumentException))]
public void ParallelSearchThrowsArgumentException131()
{
    List<object> list;
    Program s0 = new Program();
    list =
      this.ParallelSearch<object>(s0, (List<object>)null, (Func<object, bool>)null);
}
  }
}
